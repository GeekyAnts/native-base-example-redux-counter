{"version":3,"sources":["../../../src/basic/List.js"],"names":["List","props","dataArray","renderRow","ds","DataSource","rowHasChanged","r1","r2","state","dataSource","cloneWithRows","nextProps","setState","childrenArray","Children","map","children","child","ref","root","_root","c","renderChildren","StyledList"],"mappings":"8yBAAA,4B;AACA;;AAEA;AACA,mE;;AAEMA,I;;AAEJ,cAAYC,KAAZ,CAAmB;AACXA,KADW;AAEjB,GAAIA,MAAMC,SAAN,EAAmBD,MAAME,SAA7B,CAAwC;AACtC,GAAMC,IAAK,GAAI,uBAASC,UAAb,CAAwB,CAAEC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EAAjB,CAAxB,CAAX;AACA,MAAKC,KAAL,CAAa;AACXC,WAAYN,GAAGO,aAAH,CAAiBV,MAAMC,SAAvB,CADD,CAAb;;AAGD,CALD,IAKO;AACL,MAAKO,KAAL,CAAa,EAAb;AACD,CATgB;AAUlB,C;AACyBG,S,CAAW;AACnC,GAAI,KAAKH,KAAL,CAAWC,UAAf,CAA2B;AACzB,KAAKG,QAAL,CAAc;AACZH,WAAY,KAAKD,KAAL,CAAWC,UAAX,CAAsBC,aAAtB,CAAoCC,UAAUV,SAA9C,CADA,CAAd;;AAGD;AACF,C;AACgB;AACf,GAAMY,eAAgB,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAKf,KAAL,CAAWgB,QAA9B,CAAwC,sBAASC,MAAT,EAAxC,CAAtB;;AAEA,MAAOJ,cAAP;AACD,C;;AAEQ;AACP,GAAI,KAAKL,KAAL,CAAWC,UAAf,CAA2B;AACzB;AACE;AACM,KAAKT,KADX;AAEE,IAAK,aAACkB,IAAD,QAAS,QAAKC,IAAL,CAAYD,IAArB,EAFP;AAGE,wBAHF;AAIE,WAAY,KAAKV,KAAL,CAAWC,UAJzB;AAKE,UAAW,KAAKT,KAAL,CAAWE,SALxB,GADF;;;AASD;AACD;AACE,0DAAM,IAAK,sBAAK,QAAKkB,KAAL,CAAaC,CAAlB,EAAX,EAAoC,KAAKrB,KAAzC;AACG,KAAKsB,cAAL,EADH,CADF;;;AAKD,C;;;AAGH,GAAMC,YAAa,wBAAa,iBAAb,CAAgC,EAAhC,iCAA0DxB,IAA1D,CAAnB,C;;;AAGgBA,I,CAAdwB,U","file":"List.js","sourcesContent":["import React, { Component } from 'react';\nimport { ListView, View } from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass List extends Component {\n\n  constructor(props) {\n    super(props);\n    if (props.dataArray && props.renderRow) {\n      const ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });\n      this.state = {\n        dataSource: ds.cloneWithRows(props.dataArray)\n      }\n    } else {\n      this.state = {}\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (this.state.dataSource) {\n      this.setState({\n        dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)\n      });\n    }\n  }\n  renderChildren() {\n    const childrenArray = React.Children.map(this.props.children, child => child);\n\n    return childrenArray;\n  }\n\n  render() {\n    if (this.state.dataSource) {\n      return (\n        <ListView\n          {...this.props}\n          ref={(ref) => this.root = ref}\n          enableEmptySections\n          dataSource={this.state.dataSource}\n          renderRow={this.props.renderRow}\n        />\n      );\n    }\n    return (\n      <View ref={c => this._root = c} {...this.props} >\n        {this.renderChildren()}\n      </View>\n    );\n  }\n\n}\nconst StyledList = connectStyle('NativeBase.List', {}, mapPropsToStyleNames)(List);\n\nexport {\n  StyledList as List,\n};\n"]}